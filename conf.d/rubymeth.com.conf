server {
  listen 80;
  listen [::]:80;
  server_name rubymeth.com;
  rewrite ^(.*) https://$host$1 permanent;
}

server {
  listen 443 ssl spdy;
  listen [::]:443 ssl spdy;
  server_name rubymeth.com;

  root /home/denis/apps/rubymeth.com;

  # sudo openssl genrsa -des3 -out xxx_secure.key 4096 # to generate the private key
  # sudo openssl req -new -key xxx_secure.key -out xxx.csr # to generate the certificate from the private key
  # sudo openssl rsa -in xxx_secure.key -out xxx.key # to insecure the private key
  # sudo bash -c 'cat xxx.pem (provided by startssl) intermediate.pem root.pem > xxx_chain.pem'
  ssl on;
  ssl_certificate /etc/nginx/ssl/rubymeth.com_chain.pem;
  ssl_certificate_key /etc/nginx/ssl/rubymeth.com.key;

  # to generate your dhparam.pem file, run in the terminal
  # openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  # The recommended cipher suite:
  # ssl_ciphers 'AES128+EECDH:AES128+EDH';
  # The recommended cipher suite for backwards compatibility (IE6/WinXP):
  ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";


  # don't send the nginx version number in error pages and Server header
  server_tokens off;

  # config to don't allow the browser to render the page inside an frame or iframe
  # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
  # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
  # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  add_header X-Frame-Options SAMEORIGIN;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  # https://www.owasp.org/index.php/Content_Security_Policy
  # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
  # directives for css and js(if you have inline css or js, you will need to keep it too).
  # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
  add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://rubymethcom.disqus.com https://a.disquscdn.com https://www.google-analytics.com/ https://ajax.googleapis.com https://rubymethcom.disqus.com data:; img-src 'self' data: https://ssl.google-analytics.com https://referrer.disqus.com https://a.disquscdn.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://a.disquscdn.com; frame-src https://disqus.com; object-src 'none'; font-src 'self' https://fonts.gstatic.com";

  # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
  # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
  resolver 8.8.8.8 8.8.4.4 valid=300s;
  resolver_timeout 10s;
  ssl_stapling on;
  ssl_stapling_verify on;
  # sudo bash -c 'cat intermediate.pem root.pem > ca_certs.pem'
  ssl_trusted_certificate /etc/nginx/ssl/ca_certs.pem;

  # enabling Public Key Pinning Extension for HTTP (HPKP)
  # https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning
  # to generate use on of these:
  # $ openssl rsa -in my-website.key -outform der -pubout | openssl dgst -sha256 -binary | base64
  # $ openssl req -in my-website.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
  # $ openssl x509 -in my-website.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
  #add_header Public-Key-Pins 'pin-sha256="base64+info1="; max-age=31536000; includeSubDomains';
  # sudo bash -c 'openssl rsa -in xxx_secure.key -pubout > xxx.pub'
  # openssl rsa -pubout -in xxx.pub -outform der | openssl dgst -sha256 -binary | base64
  #add_header Public-Key-Pins 'pin-sha256="OX2oZbsUoi+1vD3ptJABoebVW7AQ/vbeHVT+/bNp9bw="; max-age=604800; includeSubDomains';

  # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
    access_log off;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 4G;
  keepalive_timeout 10;
}
